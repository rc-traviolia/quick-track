@using QuickTrackWeb.Services.WeekDataService
@inject IWeekDataService _weekDataService

    <div class="week-display-area">

        <div class="week-label"> WEEK </div>
        <button class="previous-week-button" @onclick="@GoBackOneWeek">previous</button>
        <div class="week-number">@PickedWeekNum</div>

        @if (PickedWeekNum == GetMaxWeekNum())
        {
            if (PickedWeekNum == 0)
            {
                var ownerIdentityName = classEntityOwnerIdentityName;
                var nullWeek = WeekWithoutProgressDto.GetNullWeek();
                <button class="next-week-button" @onclick="@(e => addWeekDialog.Show(ownerIdentityName, nullWeek))">Add</button>
                <AddWeekDialog @ref="addWeekDialog" CloseEventCallback="@Dialog_OnDialogClose"></AddWeekDialog>
            }
            else
            {
                var ownerIdentityName = classEntityOwnerIdentityName;
                var mostRecentWeek = AllWeeks.Where(w => w.Number == AllWeeks.Max(y => y.Number)).FirstOrDefault();
                <button class="next-week-button" @onclick="@(e => addWeekDialog.Show(ownerIdentityName, mostRecentWeek))">Add</button>
                <AddWeekDialog @ref="addWeekDialog" CloseEventCallback="@Dialog_OnDialogClose"></AddWeekDialog>
            }
        }
        else
        {
            <button class="next-week-button" @onclick="@GoForwardOneWeek">next</button>
        }

    <div class="week-label">
        <div class="vertical-spacer" style="height:5px"></div>
        @if (PickedWeekNum > 0)
        {
            var pickedWeek = @AllWeeks.Where(w => w.Number == PickedWeekNum).FirstOrDefault();
        <div class="week-label">@pickedWeek.MondayDate.ToString("MM/dd/yyyy")   -   @pickedWeek.MondayDate.AddDays(pickedWeek.DayCount - 1).ToString("MM/dd/yyyy")</div>
               
                }
                else
                {
                <div class="week-label">Please Create a week to Continue</div>
                }
            </div>
        </div>

@code {
    [Parameter]
    public string classEntityOwnerIdentityName { get; set; }

    [Parameter]
    public EventCallback<WeekWithoutProgressDto> WeekChangedCallback { get; set; }

    protected IEnumerable<WeekWithoutProgressDto> AllWeeks;

    protected AddWeekDialog addWeekDialog { get; set; }
    protected int PickedWeekNum { get; set; }

    protected override async Task OnInitializedAsync()
    {

        AllWeeks = (await _weekDataService.GetWeeksForClass(classEntityOwnerIdentityName));
        PickedWeekNum = GetMaxWeekNum();
        WeekChangedCallback.InvokeAsync(GetPickedWeek());// PickedWeekNum); //TODO: add here, return GetPickedWeek() instead


    }

    public async void Dialog_OnDialogClose()
    {
        AllWeeks = (await _weekDataService.GetWeeksForClass(classEntityOwnerIdentityName));
        PickedWeekNum = GetMaxWeekNum();
        WeekChangedCallback.InvokeAsync(GetPickedWeek());//PickedWeekNum);
        StateHasChanged();
    }


    public async void GoBackOneWeek()
    {
        if(PickedWeekNum > 1)
        {
            PickedWeekNum--;
        }
        WeekChangedCallback.InvokeAsync(GetPickedWeek());//PickedWeekNum);
        StateHasChanged();
    }
    public async void GoForwardOneWeek()
    {
        PickedWeekNum++;
        WeekChangedCallback.InvokeAsync(GetPickedWeek());//PickedWeekNum);
        StateHasChanged();
    }
    private int GetMaxWeekNum()
    {
        if (AllWeeks == null)
        {
            return 0;
        }
        if (AllWeeks.Count() == 0)
        {
            return 0;
        }

        return AllWeeks.Max(y => y.Number);
    }
    private WeekWithoutProgressDto GetPickedWeek()
    {
        if(PickedWeekNum <= 0)//was ==, but I'm silly
        {
            return WeekWithoutProgressDto.GetNullWeek();
        }

        return AllWeeks.Where(w => w.Number == PickedWeekNum).FirstOrDefault();
    }

}
