@using QuickTrackWeb.Services.StudentDataService
@using QuickTrackWeb.Services.WeekDataService
@using QuickTrackWeb.Services.ProgressRecordDataService
@inject IStudentDataService _studentDataService
@inject IProgressRecordDataService _progressRecordDataService

@if(ProgressRecordsForUpdate != null)//if (pickedClassEntity != null && pickedWeek == null && ProgressRecords != null)
{


    <div class="progress-display-area">
        <table class="table">
            <thead>
                <tr>
                    <th>Student</th>
                    @foreach (var trackedItem in pickedClassEntity.TrackedItems)
                    {
                        <th>@trackedItem.Name</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{
                    var sIterator = -1;
                    @foreach (var student in pickedClassEntity.Students)
                    {
                        sIterator++;

                        var tiIterator = -1;
                        <tr>
                            <td>@student.Name</td>
                            @foreach (var trackedItem in pickedClassEntity.TrackedItems)
                            {
                                tiIterator++;
                                ProgressRecordForCreationDto thisProgressRecord = ProgressRecordsForUpdate[sIterator, tiIterator];

                                <td>
                                    <ProgressInput thisProgressRecord="@thisProgressRecord"></ProgressInput>
                                    @*<input type="number" @bind-value="@thisProgressRecord.Progress">*@
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

}
else
{
    <h3 style="color:red">You must:</h3>
    <ul>
        @if (pickedClassEntity == null)
        {
            <li><h3 style="color:red">Create a Class</h3></li>
        }
        @if (pickedClassEntity.Students == null)
        {
            <li><h3 style="color:red">add at least one student to your</h3></li>
        }
        @if (pickedClassEntity.TrackedItems == null)
        {
            <li><h3 style="color:red">add at least one tracked item to your class</h3></li>
        }
        @if (pickedWeek.Number <= 0)
        {
            <li><h3 style="color:red">Create a week</h3></li>
        }
    </ul>

    <h3 style="color:blue"> Week @pickedWeek.Number</h3>
}


@code {
    [Parameter]
    public ClassEntityDto pickedClassEntity { get; set; }

    [Parameter]
    public WeekWithoutProgressDto pickedWeek { get; set; }


    protected IEnumerable<ProgressRecordDto> ProgressRecords { get; set; }
    protected ProgressRecordForCreationDto[,] ProgressRecordsForUpdate { get; set; }

    private bool firstRender = true;

    protected override async Task OnParametersSetAsync()
    {
        if (pickedWeek.Number > 0)// && firstRender)
        {
            await Task.Delay(1);
            ProgressRecords = await _progressRecordDataService.GetProgressRecordsForClassEntityAndWeek(pickedClassEntity.OwnerIdentityName, pickedWeek.Id);

            var studentCount = pickedClassEntity.Students.Count();
            var trackedItemCount = pickedClassEntity.TrackedItems.Count();
            ProgressRecordsForUpdate = new ProgressRecordForCreationDto[studentCount, trackedItemCount];

            var sIterator = -1;
            foreach (var student in pickedClassEntity.Students)
            {
                sIterator++;
                var tiIterator = -1;
                foreach (var trackedItem in pickedClassEntity.TrackedItems)
                {
                    tiIterator++;
                    if (ProgressExists(student.Id, trackedItem.Id))
                    {
                        ProgressRecordsForUpdate[sIterator, tiIterator] = new ProgressRecordForCreationDto(GetProgressRecord(student.Id, trackedItem.Id));
                    }
                    else
                    {
                        ProgressRecordsForUpdate[sIterator, tiIterator] = new ProgressRecordForCreationDto()
                        {
                            StudentId = student.Id,
                            TrackedItemId = trackedItem.Id,
                            ClassEntityId = pickedClassEntity.Id,
                            WeekId = pickedWeek.Id,
                            Progress = 0
                        };
                    }
                }
            }

            firstRender = false;
            StateHasChanged();
        }

    }
    public async void Dialog_OnDialogClose()
    {

    }

    public void UpdateProgress(ProgressRecordForCreationDto updatedProgressRecord)
    {
        _progressRecordDataService.AddOrReplaceProgressRecord(updatedProgressRecord);
        StateHasChanged();


    }
    public bool ProgressExists(int studentId, int trackedItemId)
    {
        if (ProgressRecords == null || ProgressRecords.Count() < 1)
        {
            return false;
        }
        if (ProgressRecords.Where(pr => pr.StudentId == studentId && pr.TrackedItemId == trackedItemId).FirstOrDefault() == null)
        {
            return false;
        }
        return true;
    }
    public int GetProgress(int studentId, int trackedItemId)
    {
        return ProgressRecords.Where(pr => pr.StudentId == studentId && pr.TrackedItemId == trackedItemId).FirstOrDefault().Progress;
    }
    public ProgressRecordDto GetProgressRecord(int studentId, int trackedItemId)
    {
        return ProgressRecords.Where(pr => pr.StudentId == studentId && pr.TrackedItemId == trackedItemId).FirstOrDefault();
    }
}
