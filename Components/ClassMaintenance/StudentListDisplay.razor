@using QuickTrackWeb.Services.StudentDataService;
@using QuickTrackWeb.Components.ClassMaintenance;
@inject IStudentDataService _studentDataService;

    <div class="student-list-area">
        <ul class="student-list">
            <li class="student-list-header" style="color:white">
                @if (StudentList != null)
                {
                    <div class="header-text">Students (@StudentList.Count() Total) </div>
                }
                else
                {
                    <div class="header-text">Students (0 Total) </div>
                }


                @{
                    var ownerIdentityName = classEntityOwnerIdentityName;

                    <button class="oi-oi-plus blue-button header-button" @onclick="@(e => addStudentDialog.Show(ownerIdentityName))">Add</button>
                    <AddStudentDialog @ref="addStudentDialog" CloseEventCallback="@Dialog_OnDialogClose"></AddStudentDialog>
                }
            </li>
            @if (StudentList != null)
            {

                @foreach (var student in StudentList)
                {
                    var studentToDelete = student;
        <li class="student-list-item">
           <div class="item-text">@student.Name</div>
            <button class="oi-oi-delete red-button item-button" @onclick="@(e => deleteStudentDialog.Show(studentToDelete))">Remove</button>
            <DeleteStudentDialog @ref="deleteStudentDialog" CloseEventCallback="@Dialog_OnDialogClose"></DeleteStudentDialog>

        </li>
                   

                    

                }
            }


        </ul>
    </div>

@code {
    [Parameter]
    public string classEntityOwnerIdentityName { get; set; }

    protected IEnumerable<StudentWithoutRecordsDto> StudentList;

    protected DeleteStudentDialog deleteStudentDialog { get; set; }
    protected AddStudentDialog addStudentDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {

        StudentList = (await _studentDataService.GetStudentsForClass(classEntityOwnerIdentityName));

    }
    //public async void AddStudent()
    //{
    //    StudentForCreationDto newStudent = new StudentForCreationDto();
    //    newStudent.Name = "testkid";
    //    await _studentDataService.AddStudent(classEntityOwnerIdentityName, newStudent);
    //    StateHasChanged();
    //}
    //public async void DeleteStudent(int studentId)
    //{
    //    //button that called this: <button class="oi-delete red-button" @onclick="@(e => _deleteStudentDialog.Show(studentToDelete))">Remove</button>
    //    await _studentDataService.DeleteStudent(studentId);
    //    StudentList = (await _studentDataService.GetStudentsForClass(classEntityOwnerIdentityName));
    //    StateHasChanged();
    //}
    public async void Dialog_OnDialogClose()
    {
        StudentList = (await _studentDataService.GetStudentsForClass(classEntityOwnerIdentityName));
        StateHasChanged();
    }

}
