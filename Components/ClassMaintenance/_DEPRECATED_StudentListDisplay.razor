@using QuickTrackWeb.Services.StudentDataService;
@using QuickTrackWeb.Components.ClassMaintenance; 
@inject IStudentDataService _studentDataService;

    <div class="table-container students">
        <table class="table">
            <thead>
                <tr>
                    <th class="th-text" id="student-list-header-text" style="color:white">Student</th>
                    <th class="th-button">
                        @{ 
                            var ownerIdentityName = classEntityOwnerIdentityName;

                        <button class="oi-oi-plus" @onclick="@(e => addStudentDialog.Show(ownerIdentityName))">New Student</button>
                        <AddStudentDialog @ref="addStudentDialog" CloseEventCallback="@Dialog_OnDialogClose"></AddStudentDialog>
                           }
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (StudentList != null)
                {

                    @foreach (var student in StudentList)
                    {
                        var studentToDelete = student;
                        <tr>
                            <td class="td-text"style="color:white">@student.Name</td>
                            <td class="td-button">
                                <button class="oi-oi-delete red-button" @onclick="@(e => deleteStudentDialog.Show(studentToDelete))">Remove</button>
                                <DeleteStudentDialog @ref="deleteStudentDialog" CloseEventCallback="@Dialog_OnDialogClose"></DeleteStudentDialog>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
@code {
    [Parameter]
    public string classEntityOwnerIdentityName { get; set; }

    protected IEnumerable<StudentWithoutRecordsDto> StudentList;

    protected DeleteStudentDialog deleteStudentDialog { get; set; }
    protected AddStudentDialog addStudentDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {

        StudentList = (await _studentDataService.GetStudentsForClass(classEntityOwnerIdentityName));

    }
    //public async void AddStudent()
    //{
    //    StudentForCreationDto newStudent = new StudentForCreationDto();
    //    newStudent.Name = "testkid";
    //    await _studentDataService.AddStudent(classEntityOwnerIdentityName, newStudent);
    //    StateHasChanged();
    //}
    //public async void DeleteStudent(int studentId)
    //{
    //    //button that called this: <button class="oi-delete red-button" @onclick="@(e => _deleteStudentDialog.Show(studentToDelete))">Remove</button>
    //    await _studentDataService.DeleteStudent(studentId);
    //    StudentList = (await _studentDataService.GetStudentsForClass(classEntityOwnerIdentityName));
    //    StateHasChanged();
    //}
    public async void Dialog_OnDialogClose()
    {
        StudentList = (await _studentDataService.GetStudentsForClass(classEntityOwnerIdentityName));
        StateHasChanged();
    }

}
